# YOLOv5 ðŸš€ by Ultralytics, AGPL-3.0 license
# Builds ultralytics/yolov5:latest image on DockerHub https://hub.docker.com/r/ultralytics/yolov5
# Image is CUDA-optimized for YOLOv5 single/multi-GPU training and inference

# Start FROM DeepStream docker image https://catalog.ngc.nvidia.com/orgs/nvidia/containers/deepstream
# with CUDA 11.6, Ubuntu 20.04, CUDNN 8.3.2, Triton 2.20.0

FROM nvcr.io/nvidia/deepstream:6.1-triton

ENV TRT_VERSION=8.4.1 \
    CUDA_VERSION=11.6.0 \
    NVIDIA_DRIVER_CAPABILITIES=$NVIDIA_DRIVER_CAPABILITIES,video \
    DEBIAN_FRONTEND=noninteractive \
    OMP_NUM_THREADS=1 \
    PYDS_VERSION=1.1.4
SHELL ["/bin/bash", "-c"]

# With DeepStream 6.2, the docker containers do not package libraries necessary for certain multimedia
# operations like audio data parsing, CPU decode, and CPU encode. This change could affect processing 
# certain video streams/files like mp4 that include audio track.
# RUN sh /opt/nvidia/deepstream/deepstream/user_additional_install.sh

# Downloads to user config dir
ADD https://ultralytics.com/assets/Arial.ttf https://ultralytics.com/assets/Arial.Unicode.ttf /root/.config/Ultralytics/

# Install linux packages
RUN apt update && \
    TZ=Etc/UTC apt install -y tzdata && \
    apt install --no-install-recommends --yes \
    apt-get install -y apt-transport-https ca-certificates \
    gcc git zip curl htop libgl1-mesa-glx libglib2.0-0 libpython3-dev gnupg build-essential libopencv-dev \
    libtool autoconf autogen automake pkg-config cmake make dkms g++ m4 \
    libssl1.1 libglib2.0-dev libglib2.0-dev-bin \
    libgstreamer1.0-dev libgirepository1.0-dev libcairo2-dev \
    gstreamer1.0-plugins-base \
    gstreamer1.0-tools \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    libgstreamer-plugins-base1.0-dev \
    libgstrtspserver-1.0-0 libjansson4 \
    libyaml-cpp-dev \
    python3.8 python3.8-dev python3-pip python3-gst-1.0 python3-numpy python3-gi python-gi-dev && \
    update-ca-certificates
# RUN alias python=python3

# Install TensorRT
# CUDA version should not be equal 10.2
RUN v="${TRT_VERSION}-1+cuda${CUDA_VERSION%.*}" && \
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub && \
    apt-get update && \
    apt-get install -y libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
        libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
        python3-libnvinfer=${v} libnvinfer-samples=${v} && \
    cd /usr/src/tensorrt/samples/trtexec && make

# Install deepstream python bindings (pyds library)
RUN git clone https://github.com/NVIDIA-AI-IOT/deepstream_python_apps /opt/nvidia/deepstream/deepstream/sources/deepstream_python_apps/ && \
    cd /opt/nvidia/deepstream/deepstream/sources/deepstream_python_apps/ && \
    git checkout v${PYDS_VERSION} && \
    git submodule update --init && \
    cd /opt/nvidia/deepstream/deepstream/sources/deepstream_python_apps/3rdparty/gst-python/ && \
    ./autogen.sh && \
    make -j$(nproc) && \
    make install && \
    cd /opt/nvidia/deepstream/deepstream/sources/deepstream_python_apps/bindings && \
    mkdir build && cd build && \
    cmake .. \
        -DPYTHON_MAJOR_VERSION=3 \
        -DPYTHON_MINOR_VERSION=8 \
        -DS_VERSION=6.1 \
        -DPIP_PLATFORM=linux_x86_64 && \
    make -j$(nproc) && \
    pip install ./pyds-${PYDS_VERSION}-py3-none*.whl

# Create working directory
RUN rm -rf /usr/src/app && mkdir -p /usr/src/app
WORKDIR /usr/src/app

# Install pip packages
COPY requirements/ /usr/src/app/requirements/
RUN python3 -m pip install --upgrade pip wheel setuptools && \
    pip install --no-cache -r requirements/preinstall.txt && \
    pip install --no-cache -r requirements/install.txt -r requirements/deploy.txt
    # tensorflow tensorflowjs \

# Cleanup
ENV DEBIAN_FRONTEND=teletype


# Usage Examples -------------------------------------------------------------------------------------------------------

# Build and Push
# t=ultralytics/yolov5:latest && sudo docker build -f utils/docker/Dockerfile -t $t . && sudo docker push $t

# Pull and Run
# t=ultralytics/yolov5:latest && sudo docker pull $t && sudo docker run -it --ipc=host --gpus all $t

# Pull and Run with local directory access
# t=ultralytics/yolov5:latest && sudo docker pull $t && sudo docker run -it --ipc=host --gpus all -v "$(pwd)"/datasets:/usr/src/datasets $t

# Kill all
# sudo docker kill $(sudo docker ps -q)

# Kill all image-based
# sudo docker kill $(sudo docker ps -qa --filter ancestor=ultralytics/yolov5:latest)

# DockerHub tag update
# t=ultralytics/yolov5:latest tnew=ultralytics/yolov5:v6.2 && sudo docker pull $t && sudo docker tag $t $tnew && sudo docker push $tnew

# Clean up
# sudo docker system prune -a --volumes

# Update Ubuntu drivers
# https://www.maketecheasier.com/install-nvidia-drivers-ubuntu/

# DDP test
# python -m torch.distributed.run --nproc_per_node 2 --master_port 1 train.py --epochs 3

# GCP VM from Image
# docker.io/ultralytics/yolov5:latest

gst-launch-1.0 filesrc location=/opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4 ! qtdemux ! h264parse ! nvv4l2decoder ! m.sink_0 nvstreammux name=m width=1920 height=1080 batch-size=1 ! nvinfer config-file-path= /opt/nvidia/deepstream/deepstream/samples/configs/deepstream-app/config_infer_primary.txt ! 'video/x-raw(memory:NVMM), format=(string)NV12' ! fakesink set_mode=0